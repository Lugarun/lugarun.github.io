<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Lukas's Blog</title>
        <link>https://lugarun.github.io</link>
        <description><![CDATA[Lukas's part of the blogosphere]]></description>
        <atom:link href="https://lugarun.github.io/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Mon, 09 Oct 2023 00:00:00 UT</lastBuildDate>
        <item>
    <title>Data Science Project Tooling</title>
    <link>https://lugarun.github.io/posts/2023-10-09-my-data-science-project-tooling.html</link>
    <description><![CDATA[<article>
    <section class="header">
        Posted on October  9, 2023
        
    </section>
    <section>
        <p>I have spent a lot of time thinking about how to structure data science projects.
Data science projects require a ton of infrastructure because they need to handle:</p>
<ul>
<li>code</li>
<li>one-off scripts</li>
<li>lots and lots of documentation, containing figures and numerical results</li>
<li>potentially very large datasets</li>
<li>long hardware-specific processes that may require compute clusters</li>
</ul>
<p>All of these requirements are just for model development and experimentation; bringing a model to production requires another suite of tools.
It is important to have an organized and capable methodology that will help you to speed up your feedback loops and keep your team on the same page.</p>
<h1 id="git-based-experiment-tracking">Git-based Experiment Tracking</h1>
<p>I base my project versioning approach off of <a href="https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow#:~:text=What%20is%20Gitflow%3F,lived%20branches%20and%20larger%20commits.">gitflow</a> style software development.
I am strict about the git repository only containing hashes, documentation, and code.
The git repository shouldn’t contain any data, plots, PDFs, figures, or experiment results.
I am strict on these points because artifacts obfuscate git diffs and can quickly grow the repo to an unmanageable size.
I also believe that keeping generated artifacts in version control makes it more difficult to ensure that they are reproducible.
Instead, I store experiment results in pull requests on a git forge (e.g. <a href="https://about.gitea.com/">gitea</a> ).</p>
<p>How does this work? Each experiment lives in a git branch and my main branch only contains common libraries for data access, engineering, visualization, and of course, the models.
Let’s say I want to run an experiment that compares model performance for a set of feature representations.
First, I create a pull request with a short description and then work on my experiment script and markdown report in the associated git branch.
As I am working on the experiment, I attach my results, reports, and plots to comments in the pull request.
If you want artifacts to be easily reproducible in the future, I suggest that any artifact that gets posted in the pull request should have an associated GNUMake command that will generate it from scratch in the commit directly preceding the comment.
This style allows the assets to be directly tied to the code that generates them without polluting the git repository.</p>
<p>This approach is similar to the <a href="https://dvc.org/doc/start/experiments/experiment-tracking">approach used by DVC</a>.</p>
<p>I don’t keep Jupyter Notebooks in my git repositories because they act more like generated assets than code with respect to git.
Instead, I use Python scripts with outputs embedded in markdown files.
Jupyter notebooks are convenient, beautiful, and have great caching features, but they also have out-of-order execution and they don’t integrate well with most text editors, git, or build systems.</p>
<h1 id="folder-structure">Folder Structure</h1>
<p>My typical populated folder structure looks something like this:</p>
<pre><code>├── .envrc
├── .gitignore
├── flake.lock
├── flake.nix
├── Makefile
├── poetry.lock
├── pyproject.toml
├── readme.md
├── src
│   ├── data-access.py
│   ├── data-engineering.py
│   ├── visualization.py
│   ├── check-hash.sh
│   └── model.py
├── generated
│   └── 2023-10-07-Covariance-Matrix-Prior-Investigation
│       ├── assets
│       │   ├── data
│       │   │   ├── raw.csv
│       │   │   ├── features.csv
│       │   │   └── results.csv
│       │   └── figures
│       │       ├── plot1.svg
│       │       ├── plot2.svg
│       │       ├── plot3.svg
│       │       ├── plot3-lab-presentation-format.svg
│       │       └── plot4.svg
│       └── outputs
│           ├── 2023-10-10-lab-presentation.pdf
│           └── report.pdf
└── scripts
    └── 2023-10-07-Covariance-Matrix-Prior-Investigation
        ├── report.md
        ├── hashes.txt
        ├── 2023-10-10-lab-presentation.md
        └── script.py</code></pre>
<p>The generated folder is ignored by git; this folder contains all generated assets and intermediate stages.
The scripts folder contains the scripts and associated documentation for each experiment.
I give each experiment a unique subfolder in the scripts and generated folders because you will often want to pull up the results from multiple experiments simultaneously.
Now, you can simply merge all the relevant branches together and conflicts will be restricted to the <code>src</code> directory.</p>
<h1 id="reproduciblility">Reproduciblility</h1>
<p>In addition to insisting that any shared artifacts can be recreated from scratch with a GNUMake command, I also insist that the relevant software used is reproducible.
This prevents library mismatches in the complex wonderland that is the Python package ecosystem.</p>
<p>I use a <a href="https://nixos.org/">Nix</a> environment to version all of the software that I use in the project.
To manage Python packages, I use Poetry from within Nix.
Between the <code>flake.lock</code> and <code>poetry.lock</code> files, the entire software stack can be reproduced simply by entering the directory and running <code>nix develop</code>.</p>
<p>With the code fixed in git and the software fixed via the lock files, all that remains is to fix the data.
DVC excels here as the name Data Version Control would imply.
However, I am currently not using DVC; instead, I have a <code>hashes.txt</code> file.
This file contains hashes of all data used in an experiment.
When I later return to the experiment, I can then check the current data against the saved hashes of the original data.
To be honest, I don’t end up actually doing this.
My data is usually stored in Postgres databases or object storage with backups and some redundancy that I assume to be static.</p>
<h1 id="build-systems-pipeline-definition-and-execution">Build Systems: Pipeline definition and execution</h1>
<p>I have looked into a bunch tools to define my pipelines (<a href="https://dvc.org/">DVC</a>, <a href="https://dagster.io/">Dagster</a>, <a href="https://hackage.haskell.org/package/shake">Shake</a>, <a href="https://snakemake.readthedocs.io/en/stable/">SnakeMake</a>, <a href="https://bazel.build/">Bazel</a>, etc.); however, I ended up back with GNU Makefiles because of their simplicity and ease of setup.
There are five features that I want from my pipeline executor:</p>
<ol type="1">
<li>Little to no setup cost.
It shouldn’t require a full-time job to maintain a computer cluster to run my pipelines.
The pipelines should be executable in full or partially on my local computer without any setup.</li>
<li>Cached execution.
Ideally, the pipeline would be cached by hash with some sort of centralized repository in which intermediate steps live.
A centralized cache would be a great way for me to switch between compute clusters and my local computer for analysis of experiment results.</li>
<li>Support polyglot steps.
While everything can be done in Python, not everything should.</li>
<li>Dynamic pipelines.
Pipeline steps should depend on previous results.
For example, I want to be able to define steps based on the number and type of output of previous steps.
Then, I may want to feed all previous outputs into an accumulation step.</li>
<li>Parallel and compute cluster execution.
Ideally, pipeline steps would be able to run in parallel with the ability to limit processes by memory requirements and GPU requirements.
For large projects, it would also be a benefit to submit the pipeline to compute cluster job queues.</li>
</ol>
<p>GNUMake falls short on most of these.
In practice, I have learned that the first three requirements are the most important to me.
To actually use the build system for all reports and plots it has to be fast and easy enough that it is practical to use.
With GNUMake this is effortless; I have general rules set up which I hardly ever have to change that along with my file conventions automatically generate all artifacts from the data.
GNUMake also has cached execution, but only by file date. This limited feature is just barely good enough for me.
GNUMake can also do a limited version of parallel execution.
However, the limited execution capabilities aren’t good enough for projects that have processes that require the GPU.
There may be options to address this limitation with tools like taskspooler; however, I have doubts about how easy it would be to export dependencies defined in GNUMake to task queue managers.
GNUMake can’t do dynamic pipelines, which sucks.</p>
<p>I am always looking at other options.
Right now, the main contender is DVC.
DVC has hashed caching, it has hashed external data sources.
Overall, it looks great.
It currently falls short of parallel and cluster execution.
The good news is that DVC seems to be working on this and I imagine that I will eventually make the switch.</p>
<p>Another really interesting option is <a href="https://github.com/PapenfussLab/bionix">BioNix</a>.
Unfortunately, it looks like BioNix is currently unmaintained.
If you want to dive further into build systems, check out <a href="https://www.microsoft.com/en-us/research/uploads/prod/2018/03/build-systems.pdf">Build Systems à la Carte</a> or <a href="https://signalsandthreads.com/build-systems/">this episode</a> of Signals &amp; Threads.</p>
<h1 id="conclusion">Conclusion</h1>
<p>So, there you have it, this is how I organize my data science projects.
Of course, they don’t all look exactly like this.
For example, my thesis doesn’t have the experiment branch structure.
It is a relief to have your entire project history organized as a series of well-defined experiments that you can quickly reference and reproduce.
It is also a helpful system to onboard newcomers into as they can go back and explore the history of the project, see where assumptions come from, and identify areas of improvement.</p>
    </section>
</article>
]]></description>
    <pubDate>Mon, 09 Oct 2023 00:00:00 UT</pubDate>
    <guid>https://lugarun.github.io/posts/2023-10-09-my-data-science-project-tooling.html</guid>
    <dc:creator>Lukas Schmidt</dc:creator>
</item>
<item>
    <title>Keyboard Firmware Update</title>
    <link>https://lugarun.github.io/posts/2023-03-21-keyboard-firmware-update.html</link>
    <description><![CDATA[<article>
    <section class="header">
        Posted on March 21, 2023
        
    </section>
    <section>
        <p>This blog post is an update on my <a href="./2022-07-31-keyboard.html">split wireless keyboard journey</a>.
Not much has changed in terms of hardware other than that I have added the batteries to the keyboard halfs and made some wrist rests.
What has changed a ton is the firmware and keymap.
After a long period of the keyboard sitting on the corner of my desk, I have finally got them up and running with a keymap that I am happy using on a daily basis.</p>
<p>My keyboard only has 36 keys.
So lots of trickery is required to jam the functionality of 104 keys into this small package.
Most small keyboards do this through a combination of the following:</p>
<ul>
<li><em>layers:</em> Each key on the keyboard does something different when a different ‘layer’ is activated. Layers are typically activated by holding down a key.</li>
<li><em>activation modes:</em> Keys can be assigned multiple functions based on how they are pressed. For example, a long hold might register as a shift keystroke where a tap might be the letter ‘b,’ and a double tap might register as ‘B.’</li>
<li><em>chording:</em> In chording, pressing multiple keys simultaneously activates different functions based on which keys are pressed. This is how <a href="https://en.wikipedia.org/wiki/Stenotype">Stenotype</a> keyboards work.</li>
<li><em>tap dance:</em> Tap dance is activation modes taken so far as to be something else. Keys are pressed multiple times to access different functionality as the main method of multiplexing the functionality of a key. Ben Vallack has a great <a href="https://www.youtube.com/watch?v=XBV0piKtNjI">video</a> about what you can do with this method.</li>
</ul>
<p>After experimentation with my layer-based keymap design that mostly relied on shift key style layers, I discovered home row mods.
Precondition has a great <a href="https://precondition.github.io/home-row-mods">blog post</a> going into the details on what home row mods are and how you might want to use them.
This seemed like a great idea; however, home row mods require some careful fine-tuning to ensure that the timing doesn’t result in lots of accidental modifier activations.
Thankfully, there is a preconfigured keymap called <a href="https://github.com/manna-harbour/miryoku/">Miryoku</a> that has good default values that we can start to experiment with.
Miryoku doesn’t have an implementation for the <a href="http://bluemicro.jpconstantineau.com/">BlueMicro_BLE</a> firmware I was using in the previous post; however, it does have one for <a href="https://zmk.dev/">ZMK</a>.</p>
<p>Switching to ZMK with the Adafruit Feather nRF52 microcontrollers turned out to be a challenge for someone not familiar with the ecosystem.
ZMK doesn’t natively support the Feather; however, there are unmerged <a href="https://github.com/zmkfirmware/zmk/pull/1465">pull requests</a> which seem to have gotten Feathers working.
ZMK is set up so you can easily create your configuration in a separate git repo with GitHub actions to build against the current ZMK repo.
The Miryoku ZMK implementation is simply one of these ZMK configuration repos for you to work with.
It turned out to be pretty straightforward to integrate <a href="https://github.com/tmbutcher">tmbutcher’s</a> configuration into my <a href="https://github.com/Lugarun/miryoku_zmk">Miryoku ZMK configuration</a>.
Welll, it turned out to be pretty straightforward after a month of on-and-off debugging that I am still working on forgetting.</p>
<p>Miryoku has so far been so amazing that I have become hesitant to change anything about it.
The home row mod timings are so good that from the get-go I have had negligible amounts of miss-fires.
As with any few key layout, it takes some time to get used to navigating programs like <a href="https://github.com/tmux/tmux">tmux</a>, <a href="https://kakoune.org/">kakoune</a>, or a <a href="https://xmonad.org/">tiling window manager</a> but the home row mods feel so much better than constant pinky workouts.
One thing I do want to eventually add is a gaming layer, but for now, I haven’t been playing games much, and when I do, it is Rocket League with a controller.</p>
<p>ZMK has so far been a joy to work with.
The next big ZMK steps for me are to fix a Bluetooth connection bug and to work out display support, but I will leave those for another day.</p>
    </section>
</article>
]]></description>
    <pubDate>Tue, 21 Mar 2023 00:00:00 UT</pubDate>
    <guid>https://lugarun.github.io/posts/2023-03-21-keyboard-firmware-update.html</guid>
    <dc:creator>Lukas Schmidt</dc:creator>
</item>
<item>
    <title>3D Printed Wireless Split Keyboard</title>
    <link>https://lugarun.github.io/posts/2022-07-31-keyboard.html</link>
    <description><![CDATA[<article>
    <section class="header">
        Posted on July 31, 2022
        
    </section>
    <section>
        <p>I am a bit of a keyboard nerd.
Way back when, I bought and assembled an ergodox kit.
Since then I have been glued to the <a href="https://www.reddit.com/r/ErgoMechKeyboards/">ergonomical mechanical keyboards subreddit</a>.
At some point, I looked up and was flying down the slippery slope at full speed with plans to design and build my own endgame keyboard.. it’s going to be beautiful.</p>
<p>My brother and I found a half-price <a href="https://www.creality3dofficial.com/products/ld-002h-resin-3d-printer">resin printer</a>, which I planned this project around. Resin printers are messy and toxic and create lots of waste, but they are also magical. This printer blows me away with the quality of prints it can create, especially since it is so forgiving to a new print head like me.</p>
<h1 id="d-modeling-software">3D Modeling Software</h1>
<p>I have never used any digital 3d modelling software before, so there was some exploration to do.
My brother uses <a href="https://www.creality3dofficial.com/products/ld-002h-resin-3d-printer">rhino</a>, which unfortunately only runs on Windows and costs more than I was willing to pay for this project.</p>
<p>Instead, I initially decided to use <a href="https://openscad.org/">openscad</a>, which is fantastic.
This software uses a DSL to construct your models by applying series of operations like extrusions, intersections, and subtractions to a small set of primitive objects.
This approach allows you to stick your models into git, and it is straightforward to parametrize your models. Parameterized models are handy for finetuning your print.</p>
<p>Buuuut, I have some gripes with openscad.
First, I found openscad too slow as my models started to get more complex.
Openscad is a single-threaded program with no GPU support; I found this a bit infuriating as I waited for the render to update after every adjustment made early on in the operations stack.
Openscad does cache each operation used to create your model. So it is fast to render when you add operations onto the end of the operation chain or adjust operations late in the chain. But if you change anything early in the operation chain, you can tape memes to your coworker’s desks while you wait for larger models to compile.</p>
<p>The second gripe I have is with the DSL openscad uses. The DSL is a functional language that doesn’t have first-class functions. The third gripe is that it is tough to model things that have curves. This gripe made it too difficult for me to model the keyboard’s enclosure as I wanted. Luckily my Rhino wizard of a brother helped me out and modelled the enclosure. Checkout some of his work <a href="https://www.bildhaus.ca/">here</a>.
Watching Rhino or Solidworks wizards at work is mindblowing; they can manipulate 3d objects faster than I can process what I am even looking at.</p>
<p>After openscad I discovered <a href="http://www.implicitcad.org/">implicit cad</a>, which can interpret existing openscad code but also allows you to write your models in Haskell. It looks like dreams sometimes really do come true.
By the time I found openscad, I had already modelled the key switch sockets in openscad, and my brother had modelled the enclosure. I am still in the process of remodelling the keyboard in implicitcad and maybe printing my new version sometime in the future.
Implicitcad has support for multithreading and handles more complex models far faster than openscad. The main limitation for implicitcad is the resolution that you render. Resolutions high enough for the printer take a longer time to generate.</p>
<p>Just the other day, a friend introduced me to
<a href="https://solvespace.com/index.pl">solvespace</a>, which looks promising. One of the most complex parts of using openscad and implicitcad is measuring lines and lining up objects. Solvespace gives you a GUI that makes this process much more manageable. Solvespace also saves models as plaintext files, although I am not sure how readable/version control friendly they are. I have yet to give solvespace a go.</p>
<h1 id="hotswappable-socket-design">Hotswappable Socket Design</h1>
<p>The socket for the switch is the part of the keyboard that I spent the most time on.
I wanted to make the switch sockets hot-swappable only using printed parts and wire similar to <a href="https://www.youtube.com/watch?v=v9r5DKZLz68&amp;t=256s">Jan Lunge’s Cherry MX Hot-Swappable
Sockets</a>. This requires getting the cutouts for the switch pin and the wire to push up against each other and make decent contact.</p>
<figure>
<img src="/images/2022-03-19-switch-socket_1.png" alt="Bottom view of a single switch socket. The diodes and connector wires design is very similar to Jan Lunge’s sockets." />
<figcaption aria-hidden="true">Bottom view of a single switch socket. The diodes and connector wires design is very similar to Jan Lunge’s sockets.</figcaption>
</figure>
<figure>
<img src="/images/2022-03-19-switch-socket_2.png" alt="Top view of a single switch socket." />
<figcaption aria-hidden="true">Top view of a single switch socket.</figcaption>
</figure>
<p>Having used the keyboard for a few days, I have some sticky
key issues and sometimes some delayed presses. I am unsure if this has
anything to do with poor contact with the switch pins, but I may have
to adjust the channels. I do have to adjust the channels for
the row, and column wires as the channels are so deep and narrow that
you need a narrow tip soldering iron to solder the grid cables to the
switch cables.
The bottom plate of the switch sockets is also not sturdy enough. One of the sockets snapped in the current keyboard when I pushed in the switch (the first time you put in a switch, you need some pressure to bend the wires for the switch pins).</p>
<h1 id="keyboard-layout">Keyboard Layout</h1>
<p>I used the 36 key version of the
corne layout for the keyboard layout. This layout barely fits into my print
bed, but it isn’t my favourite as the thumb clusters are one
key closer to the center of the hands for my comfort. <a href="https://www.reddit.com/r/ErgoMechKeyboards/comments/lzxtre/corne_thumb_cluster_placement/">Some people
online</a>
have the same critcism. For the next iteration I may try to create
my custom layout using <a href="https://www.ergopad.io/">ergopad</a> with a more
customized thumb cluster position and column stagger. I just need
to ensure that the keyboard still fits into the printing bed.</p>
<h1 id="hardware">Hardware</h1>
<p>I started on this journey in the middle of the chip shortage and I wanted a wireless rechargeable keyboard with screens.
I am not a hardware guy so I splurged and got two <a href="https://www.adafruit.com/product/3406">Adafruit Feather nRF52s</a> because all of the cheaper alternatives were out of stock at the time.
For the displays, I got two <a href="https://www.adafruit.com/product/4650">OLED Adafruit Wings</a>, and I got two <a href="https://www.mikroe.com/li-polymer-battery-37v-1500mah">1500mAh Li-Po batteries</a>.</p>
<h1 id="firmware">Firmware</h1>
<p>For the firmware, I am using the wonderful <a href="http://bluemicro.jpconstantineau.com/">BlueMicro_BLE project</a>, which supports the Feather out of the box. Communication between the halves of the keyboard is supported out of the box. I have not managed to get the screen working yet, and I am currently using the keyboard plugged in as I am still trying to figure out the best way to include a switch for the battery.</p>
<h1 id="keymap">Keymap</h1>
<p>I have just set up my first somewhat usable keymap and then typed out this article as practice.
This keymap doesn’t yet have a layer for function and media keys.
Finding a layout for 36 keys is something that I didn’t even think about until I sat down to make the layout, and it turns out it isn’t an awful amount of keys. For example, I had to make <code>Ctr</code>, <code>Win</code>, and <code>Alt</code> modifiers toggleable like shift as I couldn’t get them on the base layer along with all the other keys I wanted on the thumb cluster.</p>
<p>Base Layer:</p>
<pre><code>,----------------------------------.,----------------------------------.
|   Q  |   W  |   E  |   R  |   T  ||   Y  |   U  |   I  |   O  |   P  |
|------+------+------+------+------||------+------+------+------+------|
|   A  |   S  |   D  |   F  |   G  ||   H  |   J  |   K  |   L  |   ;  |
|------+------+------+------+------||------+------+------+------+------|
|   Z  |   X  |   C  |   V  |   B  ||   N  |   M  |   ,  |   .  |   /  |
`------+------+------+------+------||------+------+------+------+------&#39;
              | L(1) | Space|Enter ||Shift |Backspace|Tab|
              `--------------------&#39;`--------------------&#39;</code></pre>
<p>Layer One:</p>
<pre><code>,----------------------------------.,----------------------------------.
|   1  |   2  |   3  |   4  |   5  ||   6  |   7  |   8  |   9  |   0  |
|------+------+------+------+------||------+------+------+------+------|
|  Esc | Left | Up   | Down | Right||   -  |   =  |   [  |   ]  |   &#39;  |
|------+------+------+------+------||------+------+------+------+------|
| Ctr  | Win  |Alt   | Del  | Esc  ||   \  |   `  |      |      |      |
`------+------+------+------+------||------+------+------+------+------&#39;
              | L(h) |      |      || Shift|      |      |
              `--------------------&#39;`--------------------&#39;</code></pre>
<p>Even with all of the compromises, I am still able to navigate my window
manager and tmux (slowly) and type out this article (slowly) without
using another keyboard.
The current setup is pictured below.</p>
<p><img src="/images/2022-07-31-assembled-board.jpg" /></p>
    </section>
</article>
]]></description>
    <pubDate>Sun, 31 Jul 2022 00:00:00 UT</pubDate>
    <guid>https://lugarun.github.io/posts/2022-07-31-keyboard.html</guid>
    <dc:creator>Lukas Schmidt</dc:creator>
</item>

    </channel>
</rss>
